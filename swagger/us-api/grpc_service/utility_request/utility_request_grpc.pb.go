// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.0
// source: utility_request.proto

package utility_request

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	UtilityServices_ListUtilityServices_FullMethodName = "/grpc_service.utility.UtilityServices/ListUtilityServices"
	UtilityServices_FetchUtilityRequest_FullMethodName = "/grpc_service.utility.UtilityServices/FetchUtilityRequest"
)

// UtilityServicesClient is the client API for UtilityServices service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Service definition
type UtilityServicesClient interface {
	// Maps the ListUtilityRequest method to a GET request on /v1/utility_request
	ListUtilityServices(ctx context.Context, in *ListUtilityRequest, opts ...grpc.CallOption) (*ListUtilityResponse, error)
	FetchUtilityRequest(ctx context.Context, in *UtilityServiceRequest, opts ...grpc.CallOption) (*UtilityServiceResponse, error)
}

type utilityServicesClient struct {
	cc grpc.ClientConnInterface
}

func NewUtilityServicesClient(cc grpc.ClientConnInterface) UtilityServicesClient {
	return &utilityServicesClient{cc}
}

func (c *utilityServicesClient) ListUtilityServices(ctx context.Context, in *ListUtilityRequest, opts ...grpc.CallOption) (*ListUtilityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListUtilityResponse)
	err := c.cc.Invoke(ctx, UtilityServices_ListUtilityServices_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *utilityServicesClient) FetchUtilityRequest(ctx context.Context, in *UtilityServiceRequest, opts ...grpc.CallOption) (*UtilityServiceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UtilityServiceResponse)
	err := c.cc.Invoke(ctx, UtilityServices_FetchUtilityRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UtilityServicesServer is the server API for UtilityServices service.
// All implementations must embed UnimplementedUtilityServicesServer
// for forward compatibility.
//
// Service definition
type UtilityServicesServer interface {
	// Maps the ListUtilityRequest method to a GET request on /v1/utility_request
	ListUtilityServices(context.Context, *ListUtilityRequest) (*ListUtilityResponse, error)
	FetchUtilityRequest(context.Context, *UtilityServiceRequest) (*UtilityServiceResponse, error)
	mustEmbedUnimplementedUtilityServicesServer()
}

// UnimplementedUtilityServicesServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUtilityServicesServer struct{}

func (UnimplementedUtilityServicesServer) ListUtilityServices(context.Context, *ListUtilityRequest) (*ListUtilityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUtilityServices not implemented")
}
func (UnimplementedUtilityServicesServer) FetchUtilityRequest(context.Context, *UtilityServiceRequest) (*UtilityServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchUtilityRequest not implemented")
}
func (UnimplementedUtilityServicesServer) mustEmbedUnimplementedUtilityServicesServer() {}
func (UnimplementedUtilityServicesServer) testEmbeddedByValue()                         {}

// UnsafeUtilityServicesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UtilityServicesServer will
// result in compilation errors.
type UnsafeUtilityServicesServer interface {
	mustEmbedUnimplementedUtilityServicesServer()
}

func RegisterUtilityServicesServer(s grpc.ServiceRegistrar, srv UtilityServicesServer) {
	// If the following call pancis, it indicates UnimplementedUtilityServicesServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&UtilityServices_ServiceDesc, srv)
}

func _UtilityServices_ListUtilityServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUtilityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UtilityServicesServer).ListUtilityServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UtilityServices_ListUtilityServices_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UtilityServicesServer).ListUtilityServices(ctx, req.(*ListUtilityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UtilityServices_FetchUtilityRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UtilityServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UtilityServicesServer).FetchUtilityRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UtilityServices_FetchUtilityRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UtilityServicesServer).FetchUtilityRequest(ctx, req.(*UtilityServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UtilityServices_ServiceDesc is the grpc.ServiceDesc for UtilityServices service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UtilityServices_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc_service.utility.UtilityServices",
	HandlerType: (*UtilityServicesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListUtilityServices",
			Handler:    _UtilityServices_ListUtilityServices_Handler,
		},
		{
			MethodName: "FetchUtilityRequest",
			Handler:    _UtilityServices_FetchUtilityRequest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "utility_request.proto",
}
